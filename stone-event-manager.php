<?php

/*
Plugin Name: Stone Event Manager
Plugin URI: http://johnathonstone.com
Description: Promote your events in WordPress with a user-friendly event creation form that creates a new post with a Google Map.
Version: 0.3.5
*/

/* Change log:
Vs 0.0.1	11/10/2016	Initial build.
Vs 0.0.2	11/10/2016	Moved the form HTML into the plugin.
Vs 0.0.3	11/10/2016	Created the event receiver.
Vs 0.0.4	11/10/2016	Implement PHP / HTML / MySQL santiziation.
Vs 0.1.0	11/11/2016	Prototype build complete!
Vs 0.1.1	11/11/2016	Implemented better naming conventions, added checking.
Vs 0.2.0	11/11/2016	Split event receiver into modular functions.
Vs 0.2.1	11/11/2016	Improved success message display.
Vs 0.3.0	11/28/2016	Improved form input names, added required fields.
												Added support for post meta interaction.
Vs 0.3.1	11/28/2016	Improved event post content generation.
Vs 0.3.2	11/28/2016	Added Google Maps to post content generation.
Vs 0.3.3	11/28/2016	Improved date and time display in post content.
												Added automatic 'Events' category assignment.
Vs 0.3.4	11/28/2016	Moved Google Maps code into dedicated functions.
Vs 0.3.5	11/28/2016	Fixed bug experienced with ampersands in map locations.
*/

function sem_version() {
	// Return current plugin version number.
	return '0.3.5';
}

function sem_create_event_wp_postarr($event_data) {
	// Creates a WordPress Post Array using standard event data.

	// Prepare the category information.
	$category_id = trc_get_category_id_by_slug('events');
	$post_category = array($category_id);

	// Populate the WordPress post array with the event information.
	$postarr = array(
		'post_category' => $post_category,
		'post_content' => sem_event_post_content($event_data),
		'post_name' => $event_data['event_title'],
		'post_status' => 'publish',
		'post_title' => $event_data['event_title'],
		'meta_input' => $event_data
	);

	// Return the post array.
	return $postarr;
}

function sem_display_event_form() {
	// Display the Event Creation Form.
	date_default_timezone_set('America/Chicago');

	echo '
		<form action="/event-creation-confirmation/" method="POST">
				<div class="full-width">
						Event Title: <input name="event_title" type="text" required>
				</div>
				<div class="full-width">
						Date: <input name="event_date" type="date" required>
				</div>
				<div class="half-width">
						Start Time: <input name="event_start_time" type="time">
				</div>
				<div class="half-width">
						End Time: <input name="event_end_time" type="time">
				</div>
				<div class="full-width">
						Map Location: <input name="event_map_location" type="text">
				</div>
				<div class="full-width">
						Descriptive Location: <input name="event_descriptive_location" type="text">
				</div>
				<div class="full-width">
						Description: <textarea name="event_description" required></textarea>
				</div>
				<input name="cne-submitted" type="submit" value="Create Event">
		</form>
	';

	// Display the "Generated by" text for the plugin below the form.
	echo sem_plugin_branding_text();
}

function sem_event_data_display_text($event_data) {
	// Create a string of HTML code that displays the event data to the user.

	// Get the functional and pretty versions of the field names.
	$field_names = sem_field_names();
	$pretty_field_names = sem_field_names(true);

	// Build the display text.
	$event_data_display_text = '';
	for( $i = 0; $i < count($event_data); $i++ ) {
		$event_data_display_text .= '<div style="display: block;">';
		$event_data_display_text .= $pretty_field_names[$i] . ': ';
		$event_data_display_text .= htmlspecialchars($event_data[$field_names[$i]]);
		$event_data_display_text .= '</div>';
	}

	// Return the event data display code.
	return $event_data_display_text;
}

function sem_event_post_content($event_data) {
	// Builds the post content for the WordPress event post.

	// Put the event data in convenient variables.
	$event_date = $event_data['event_date'];
	$event_description = $event_data['event_description'];
	$event_start_time = $event_data['event_start_time'];
	$event_end_time = $event_data['event_end_time'];
	$event_map_location = $event_data['event_map_location'];
	$event_descriptive_location = $event_data['event_descriptive_location'];

	// Convert the times and dates into user-friendly formats.
	date_default_timezone_set('America/Chicago');
	$start_time = date('g:ia', strtotime($event_start_time));
	$end_time = date('g:ia', strtotime($event_end_time));
	$date = date('l, F j, Y', strtotime($event_date));
	$date_and_time = "$date from $start_time - $end_time";

	// Build the Google Map.
	$google_map_code = sem_get_google_map_code($event_map_location);

	// Build the post content.
	$post_content = "
		<p>$event_description</p>
		<p><strong>Time and Place:</strong></p>
		<p style='margin-bottom: 64px;'>
			$date_and_time
			Location: $event_descriptive_location
		</p>
		$google_map_code
	";

	// Return the post content.
	return $post_content;
}

function sem_execute_sql($sql) {
	// Executes a provided SQL query and returns the result.

	// Include wp-config to provide the database connection credentials.
	require_once(ABSPATH . 'wp-config.php');

	// Establish the connection to the WordPress database.
	$connection = mysql_connect($DB_HOST, $DB_USER, $DB_PASSWORD);

	// Select the WordPress database.
	mysql_select_db($DB_NAME);

	// Execute the query and save the results.
	$q = mysql_query($sql);

	// Close the database connection.
	mysql_close();

	// Return the results of the query.
	return $q;
}

function sem_event_receiver() {
	// Receives the event information and performs several actions:
	//		- displays the user-submitted event details for confirmation.
	//		- creates a WordPress post for the event.

	// Check whether all of the required fields have values set.
	if( sem_missing_field_count() == false ) {
		// Proceed with creating the event.

		// Display a message to the user indicating successful event creation.
		echo '
			<div style="display: block;">
				<strong>Event created successfully!</strong>
			</div>
		';

		// Create an array with sanitized event data.
		$event_data = sem_parse_event_form_data();

		// Create the WordPress post.
		//$post_creation_status = sem_create_event_wp_post($event_data);
		$postarr = sem_create_event_wp_postarr($event_data);
		$post = wp_insert_post($postarr, true);

		// Inform the user whether the post creation was successful or not.
		echo '<div style="display: block;">';
	if( !is_wp_error($post) ) {
			// Post was successfully created.
			echo 'WordPress post was successfully created!';
		}
		else {
			// Error occured while creating the post.
			echo 'An error occurred while creating the WordPress post: ';
			echo $post->get_error_message();
		}
		echo '</div>';

		// Display the event data received to the user for confirmation.
		echo '<h3>Event Details:</h3>';
		echo sem_event_data_display_text($event_data);
	}
	else {
		// Display error: The event could not be created because fields are missing.
		echo '
			<div style="display: block;">
				<strong>Error while creating event: ' . sem_missing_field_count() . '
				required fields missing.</strong>
			</div>
		';
	}

	// Display the "Generated by" text for the plugin below the form.
	echo sem_plugin_branding_text();
}

function sem_field_names($pretty = false) {
	// Returns an array with the standard event data field names.
	// Returns pretty, formatted version with optional argument.

	// Create the array of field names with a numeric index.
	if( $pretty ) {
		$field_names = array(
			'Event Title',
			'Date',
			'Start Time',
			'End Time',
			'Map Location',
			'Descriptive Location',
			'Details'
		);
	}
	else {
		$field_names = array(
			'event_title',
			'event_date',
			'event_start_time',
			'event_end_time',
			'event_map_location',
			'event_descriptive_location',
			'event_description'
		);
	}

	// Return the array of field names.
	return $field_names;
}

function sem_get_google_map_code($map_location_string) {
	// Gets the HTML code for an embedded Google Map.
	//	Requires a map location string.

	// Build the map URL.
	$google_map_url = sem_get_google_map_url($map_location_string);

	// Build the map code.
	$google_map_code = "
		<iframe
			width='80%'
			height='420'
			frameborder='0' style='border:0'
			src='$google_map_url' allowfullscreen>
		</iframe>
	";

	// Return the HTML code as a string.
	return $google_map_code;
}

function sem_get_google_map_url($map_location_string) {
	// Parses a user-provided map location string and returns a URL that can
	//	be used to generate a Google Map.

	// Get the Google Maps API key.
	require_once('includes/google-maps-api.php');

	// Build the map URL.
	$google_maps_api_key = sem_get_google_maps_api_key();
	$base_url = 'https://www.google.com/maps/embed/v1/place?key=';
	$map_url = $base_url . $google_maps_api_key . '&q=';
	$map_url .= sem_parse_google_map_address_for_api($map_location_string);

	// Return the API-friendly map URL string.
	return $map_url;
}

function sem_missing_field_count() {
	// Detects whether there are required fields missing and returns how many.

	// Create an array of the field names.
	$field_names = sem_field_names();

	// Check to see whether the required POST data is set.
	$missing_field_count = 0;
	for( $i = 0; $i < count($field_names); $i++ ) {
		if( isset($_POST[$field_names[$i]]) ) {
			if( empty($_POST[$field_names[$i]]) ) {
				$missing_field_count += 1;
			}
		}
		else {
			$missing_field_count += 1;
		}
	}

	// Return the number of missing fields. If none, 0 (or "false").
	return $missing_field_count;
}

function sem_parse_event_form_data() {
	// Reads and sanitizes the event form data and returns it as an array.

	// Get and sanitize the event creation form data and store as array.
	$event_data = array();
	$event_fields = sem_field_names();
	foreach ($event_fields as $field) {
		$user_data = strip_tags($_POST[$field]);
		$event_data[$field] = $user_data;
	}

	// Return the array of event data.
	return $event_data;
}

function sem_parse_google_map_address_for_api($address) {
	// Converts a map address to a string form with +'s instead of spaces,
	//	and no spaces before or after commas.

	// List of original and replacement strings.
	$replacements = array(
		'&' 	=> '%26',	// Replace ampersands with their URI encoded version.
		', ' 	=> ',',		// Remove spaces that come after commas.
		' ' 	=> '+'		// Replace remaining spaces with plus signs.
	);

	// Remove spaces at the beginning and end of the entire string.
	$api_friendly_address = trim($address);

	// Perform text replacements.
	foreach ($replacements as $original => $new) {
		$api_friendly_address = str_replace($original, $new, $api_friendly_address);
	}

	// Return the modified string.
	return $api_friendly_address;
}

function sem_plugin_branding_text() {
	// Returns a string of HTML advertising the plugin and a timestamp.

	// Set the timezone.
	date_default_timezone_set('America/Chicago');

	// Build the branding text.
	$branding_text = '
		<div style="display: block; font-size: smaller; padding: 16px 0 16px 0;">
			Generated by <a href="http://johnathonstone.com"
			title="Johnathon Stone | Developer"><em>Stone Event Manager</a>
			' . sem_version() . '</em>
			at ' . date('h:i:sa') . '
		</div>
	';

	// Return the branding text.
	return $branding_text;
}

function sem_shortcode_form( $atts ) {
	// Display the Event Creation Form at shortcode [stone_event_manager_form].
	ob_start();
	sem_display_event_form();
	return ob_get_clean();
}

function sem_shortcode_receiver( $atts ) {
	// Receive and process the event details at shortcode
	//	[stone_event_manager_receiver].
	ob_start();
	sem_event_receiver();
	return ob_get_clean();
}

function sem_sql_test(){
	// Test function to retrieve and display SQL data.
	$sql = 'SELECT * FROM Blackbook';
	$q = sem_execute_sql($sql);

	while( $e = mysql_fetch_assoc($q) ) {
  	echo "<p>Record: " . $e['FName'] . " " . $e['LName'] . " " . $e['Phone'] . "</p>";
	};
}

add_shortcode( 'stone_event_manager_form', 'sem_shortcode_form' );
add_shortcode( 'stone_event_manager_receiver', 'sem_shortcode_receiver' );

?>
