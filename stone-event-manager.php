<?php

/*
Plugin Name: Stone Event Manager
Plugin URI: http://johnathonstone.com
Description: Promote your events in one place. Post to WordPress, Facebook, Google Calendar, and Twitter!
Version: 0.2.1
*/

/* Change log:
Vs 0.0.1	11/10/2016	Initial build.
Vs 0.0.2	11/10/2016	Moved the form HTML into the plugin.
Vs 0.0.3	11/10/2016	Created the event receiver.
Vs 0.0.4	11/10/2016	Implement PHP / HTML / MySQL santiziation.
Vs 0.1.0	11/11/2016	Prototype build complete!
Vs 0.1.1	11/11/2016	Implemented better naming conventions, added checking.
Vs 0.2.0	11/11/2016	Split event receiver into modular functions.
Vs 0.2.1	11/11/2016	Improved success message display.
*/

function sem_version() {
	// Return current plugin version number.
	return '0.2.1';
}

function sem_create_event_wp_post($event_data) {
	// Creates a WordPress post using sanitized event data.

	// Populate the WordPress post array with the event information.
	$postarr = sem_create_event_wp_postarr($event_data);

	// Create the WordPress post.
	$post_creation_status = sem_create_wp_post($postarr);

	// Return the post creation status and/or error message array.
	return $post_creation_status;
}

function sem_create_event_wp_postarr($event_data) {
	// Creates a WordPress Post Array using standard event data.

	// Populate the WordPress post array with the event information.
	$postarr = array(
		'post_content' => sem_event_data_display_text($event_data),
		'post_name' => $event_data['title'],
		'post_status' => 'publish',
		'post_title' => $event_data['title']
	);

	// Return the post array.
	return $postarr;
}

function sem_create_wp_post($postarr) {
	// Creates a WordPress post using a sanitized post array.

	// Create the WordPress Post and determine success.
	$post_created_error = wp_insert_post($postarr, true);

	// Check for WP error during post creation attempt.
	$post_created = true;
	if( is_wp_error($post_created_error) ) {
		$post_created = false;
	}

	// Prepare the return array with two values - a boolean to indicate success
	// and the WP error in the event of one. If no error, the second value
	// is not added.
	$post_creation_status = array($post_created);

	// Add the WP error in the event of one.
	if( $post_created == false ) {
		array_push($post_creation_status, $post_created_error);
	}

	// Return the post creation status array.
	return $post_creation_status;
}

function sem_display_event_form() {
	// Display the Event Creation Form.
	echo '
		<form action="/event-creation-confirmation/" method="POST">
			<div class="full-width">
				Event Title: <input name="title" type="text" />
			</div>
			<div class="full-width">
				Date: <input name="date" type="date" />
			</div>
			<div class="half-width">
				Start Time:	<input name="start_time" type="time" />
			</div>
			<div class="half-width">
				End Time:	<input name="end_time" type="time" />
			</div>
			<div class="full-width">
				Location:	<input name="location" type="text" />
			</div>
			<div class="full-width">
				Description: <textarea name="description"></textarea>
			</div>
			<input name="cne-submitted" type="submit" value="Create Event" />
		</form>
	';

	// Display the "Generated by" text for the plugin below the form.
	echo sem_plugin_branding_text();
}

function sem_event_data_display_text($event_data) {
	// Create a string of HTML code that displays the event data to the user.

	// Get the functional and pretty versions of the field names.
	$field_names = sem_field_names();
	$pretty_field_names = sem_field_names(true);

	// Build the display text.
	$event_data_display_text = '';
	for( $i = 0; $i < count($event_data); $i++ ) {
		$event_data_display_text .= '<div style="display: block;">';
		$event_data_display_text .= $pretty_field_names[$i] . ': ';
		$event_data_display_text .= htmlspecialchars($event_data[$field_names[$i]]);
		$event_data_display_text .= '</div>';
	}

	// Return the event data display code.
	return $event_data_display_text;
}

function sem_execute_sql($sql) {
	// Executes a provided SQL query and returns the result.

	// Include wp-config to provide the database connection credentials.
	require_once(ABSPATH . 'wp-config.php');

	// Establish the connection to the WordPress database.
	$connection = mysql_connect($DB_HOST, $DB_USER, $DB_PASSWORD);

	// Select the WordPress database.
	mysql_select_db($DB_NAME);

	// Execute the query and save the results.
	$q = mysql_query($sql);

	// Close the database connection.
	mysql_close();

	// Return the results of the query.
	return $q;
}

function sem_event_receiver() {
	// Receives the event information and performs several actions:
	//		- displays the user-submitted event details for confirmation.
	//		- creates a WordPress post for the event.

	// Check whether all of the required fields have values set.
	if( sem_missing_field_count() == false ) {
		// Proceed with creating the event.

		// Display a message to the user indicating successful event creation.
		echo '
			<div style="display: block;">
				<strong>Event created successfully!</strong>
			</div>
		';

		// Create an array with sanitized event data.
		$event_data = sem_parse_event_form_data();

		// Create the WordPress post.
		$post_creation_status = sem_create_event_wp_post($event_data);

		// Inform the user whether the post creation was successful or not.
		echo '<div style="display: block;">';
		if( $post_creation_status[0] ) {
			// Post was successfully created.
			echo 'WordPress post was successfully created!';
		}
		else {
			// Error occured while creating the post.
			echo 'An error occurred while creating the WordPress post: ';
			echo $post_creation_status[1]->get_error_message();
		}
		echo '</div>';

		// Display the event data received to the user for confirmation.
		echo '<h3>Event Details:</h3>';
		echo sem_event_data_display_text($event_data);
	}
	else {
		// Display error: The event could not be created because fields are missing.
		echo '
			<div style="display: block;">
				<strong>Error while creating event: ' . sem_missing_field_count() . '
				required fields missing.</strong>
			</div>
		';
	}

	// Display the "Generated by" text for the plugin below the form.
	echo sem_plugin_branding_text();
}

function sem_field_names($pretty = false) {
	// Returns an array with the standard event data field names.
	// Returns pretty, formatted version with optional argument.

	// Create the array of field names with a numeric index.
	if( $pretty ) {
		$field_names = array(
			'Event',
			'Date',
			'Start Time',
			'End Time',
			'Location',
			'Details'
		);
	}
	else {
		$field_names = array(
			'title',
			'date',
			'start_time',
			'end_time',
			'location',
			'description'
		);
	}

	// Return the array of field names.
	return $field_names;
}

function sem_missing_field_count() {
	// Detects whether there are required fields missing and returns how many.

	// Create an array of the field names.
	$field_names = sem_field_names();

	// Check to see whether the required POST data is set.
	$missing_field_count = 0;
	for( $i = 0; $i < count($field_names); $i++ ) {
		if( isset($_POST[$field_names[$i]]) ) {
			if( empty($_POST[$field_names[$i]]) ) {
				$missing_field_count += 1;
			}
		}
		else {
			$missing_field_count += 1;
		}
	}

	// Return the number of missing fields. If none, 0 (or "false").
	return $missing_field_count;
}

function sem_parse_event_form_data() {
	// Reads and sanitizes the event form data and returns it as an array.

	// Get and sanitize the event creation form data.
	$title = strip_tags($_POST['title']);
	$date = strip_tags($_POST['date']);
	$start_time = strip_tags($_POST['start_time']);
	$end_time = strip_tags($_POST['end_time']);
	$location = strip_tags($_POST['location']);
	$description = strip_tags($_POST['description']);

	// Create the array of event data.
	$event_data = array(
		'title' => $title,
		'date' => $date,
		'start_time' => $start_time,
		'end_time' => $end_time,
		'location' => $location,
		'description' => $description
	);

	// Return the array of event data.
	return $event_data;
}

function sem_plugin_branding_text() {
	// Returns a string of HTML advertising the plugin and a timestamp.

	// Set the timezone.
	date_default_timezone_set('America/Chicago');

	// Build the branding text.
	$branding_text = '
		<div style="display: block; font-size: smaller; padding: 16px 0 16px 0;">
			Generated by <a href="http://johnathonstone.com"
			title="Johnathon Stone | Developer"><em>Stone Event Manager</a>
			' . sem_version() . '</em>
			at ' . date('h:i:sa') . '
		</div>
	';

	// Return the branding text.
	return $branding_text;
}

function sem_shortcode_form( $atts ) {
	// Display the Event Creation Form at shortcode [stone_event_manager_form].
	ob_start();
	sem_display_event_form();
	return ob_get_clean();
}

function sem_shortcode_receiver( $atts ) {
	// Receive and process the event details at shortcode
	//	[stone_event_manager_receiver].
	ob_start();
	sem_event_receiver();
	return ob_get_clean();
}

function sem_sql_test(){
	// Test function to retrieve and display SQL data.
	$sql = 'SELECT * FROM Blackbook';
	$q = sem_execute_sql($sql);

	while( $e = mysql_fetch_assoc($q) ) {
  	echo "<p>Record: " . $e['FName'] . " " . $e['LName'] . " " . $e['Phone'] . "</p>";
	};
}

add_shortcode( 'stone_event_manager_form', 'sem_shortcode_form' );
add_shortcode( 'stone_event_manager_receiver', 'sem_shortcode_receiver' );

?>
